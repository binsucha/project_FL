<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ShopMapper">
	<!-- 가게 데이터 중복 확인 -->
	<select id="checkData" parameterType="hashMap" resultType="String">
		select shop_name from shop
		where shop_contact = #{shopContact}
	</select>
	
	<!-- 카테고리 출력 -->
	<select id="category" resultType="CategoryDTO">
		select * from category
	</select>
	
	<!-- 카테고리2 출력 -->
	<select id="category2" resultType="Category2DTO">
		select * from category2
	</select>
	
	<!-- 가게 등록 -->
	<insert id="insertShop" parameterType="hashMap">
		insert into shop (shop_no, shop_name, category_no, category2_no, shop_location, shop_contact, shop_info, average_rate, shop_created, shop_hits)
		values (SHOP_SEQ.nextval, #{shopName}, #{category}, #{category2}, #{shopLocation}, #{shopContact}, #{shopInfo}, 0, sysdate, 0)
	</insert>
	
	<!-- 가게 번호 가져오기 -->
	<select id="selectShopNo" parameterType="hashMap" resultType="int">
		select shop_no from shop
		where shop_name = #{shopName}
		and shop_contact = #{shopContact}
	</select>
	
	<!-- 가게 이미지 등록 -->
	<insert id="insertShopImg" parameterType="hashMap">
		insert into shop_img (shop_no, shop_img_rank, shop_img_route)
		values (#{shopNo}, #{imgRank}, #{imgRoute})
	</insert>
	
	<!-- 가게 이미지 가져오기 -->
	<select id="selectShopImg" parameterType="hashMap" resultType="ShopImgDTO">
		select * from shop_img
		where shop_no = #{imgShopNo}
		order by shop_img_rank
	</select>
	
	<!-- 가게 상세 페이지 -->
	<select id="selectShop" resultType="ShopDTO">
		select s.shop_no, shop_name, s.category_no, s.category2_no, shop_location,
			shop_contact, shop_info, round(avg(r.rate),1) average_rate, shop_created, shop_hits,
			shop_img_rank, shop_img_route,
			c.category_name, c.category_rank,
			c2.category2_name, c2.category2_rank
		from shop s join shop_img i
				on s.shop_no = i.shop_no
			join category c
				on s.category_no = c.category_no
			join category2 c2
				on s.category2_no = c2.category2_no
			left outer join review r
                on s.shop_no = r.shop_no
		where s.shop_no = #{shopNo}
		and shop_img_rank = 1
		group by s.shop_no, shop_name, s.category_no, s.category2_no, shop_location,
			shop_contact, shop_info, shop_created, shop_hits,
			shop_img_rank, shop_img_route,
			c.category_name, c.category_rank,
			c2.category2_name, c2.category2_rank
	</select>
	
	<!-- 가게 평점 출력 -->
	<select id="selectRating" resultType="double">
<!-- 	select round(avg(rate),1) from review
		where shop_no = #{shopNo} -->
		select nvl(round(avg(rate),1), 0) as rate
		from (select rate
		        from review
		        where shop_no = #{shopNo}
		        
		        union all
		        
		        select null as rate
		        from dual)
		where rate is not null or rownum = 1
	</select>
	
	<!-- 가게 이미지 삭제 -->
	<delete id="deleteShopImg">
		delete from shop_img
		where shop_no = #{shopNo}
	</delete>
	
	<!-- 가게 삭제 -->
	<delete id="deleteShop">
		delete from shop
		where shop_no = #{shopNo}
	</delete>
</mapper>