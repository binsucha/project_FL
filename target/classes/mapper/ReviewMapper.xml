<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ReviewMapper">
	<!-- 전체 가게 목록 -->
	<select id="selectAllShop" resultType="ShopDTO" parameterType="hashMap">
		select s.shop_no, shop_name, s.category_no, s.category2_no, shop_location,
			shop_contact, shop_info, average_rate, shop_created, shop_hits,
			shop_img_rank, shop_img_route,
			c.category_name, c.category_rank,
			c2.category2_name, c2.category2_rank
		from shop s
		join shop_img i on s.shop_no = i.shop_no
		join category c on s.category_no = c.category_no
		join category2 c2 on s.category2_no = c2.category2_no
		<where>
			shop_img_rank = 1<!-- 가게 이미지 1개만 출력 -->
			<if test="categoryNo != null and !categoryNo.equals('')">
				and	s.category_no = #{categoryNo}<!-- 선택된 카테고리만 출력 -->
			</if>
			<if test="searchName != null and !searchName.equals('')">
				and	${searchName} like '%${searchValue}%'
			</if>
		</where>
		order by
		<if test="sortBy != null and !sortBy.equals('')">
			${sortBy} desc,
		</if>
		shop_created desc, s.shop_no, shop_img_rank<!-- default 정렬 기준 -->
	</select>
	
	<!-- 전체 가게 개수 -->
	<select id="countTotalShop" parameterType="hashMap" resultType="int">
		select count(*) from shop
		<where>
			<if test="categoryNo != null and !categoryNo.equals('')">
				and	category_no = #{categoryNo}<!-- 선택된 카테고리만 출력 -->
			</if>
			<if test="searchName!=null and !searchName.equals('')">
				and	${searchName} like '%${searchValue}%'
			</if>
		</where>
	</select>
	
	<!-- 후기 데이터 저장 -->
	<insert id="insertReview" parameterType="hashMap">
		insert all
		into review (review_no, id, shop_no, rate, review_content, review_created)
		values (REVIEW_SEQ.nextval, #{id}, #{shopNo}, #{rating}, #{content}, sysdate)
		<if test="reviewImgRoute != null and !reviewImgRoute.equals('')">
			into review_img (review_no, review_img_route)
			values (REVIEW_SEQ.nextval, #{reviewImgRoute})
		</if>
		select * from dual
	</insert>
	
	<!-- 가게 후기 목록 -->
	<select id="selectShopReviews" resultType="ReviewDTO">
		select r.review_no, r.id, shop_no, rate, review_content, review_created, i.review_img_route, member_name
		from review r
		LEFT OUTER JOIN review_img i ON r.review_no = i.review_no
		join member m on r.id = m.id
		where shop_no = #{shopNo}
		order by r.review_no desc
	</select>
	
	<!-- 후기 댓글 등록 -->
	<insert id="insertComment" parameterType="hashMap">
		insert into review_comment (review_no, id, comment_content, comment_created, comment_no)
		values (#{reviewNo}, #{id}, #{comment}, sysdate, COMMENT_SEQ.nextval)
	</insert>
	
	<!-- 후기의 댓글 목록 -->
	<select id="selectComments" parameterType="hashMap" resultType="CommentDTO">
		select review_no, r.id, comment_content, comment_created, comment_no, member_name
		from review_comment r
		join member m on r.id = m.id
		where review_no = #{reviewNo}
		<if test="lastNo != null">
			and comment_no > #{lastNo}
		</if>
		order by comment_no
	</select>
	
	<!-- 후기 댓글 삭제 -->
	<delete id="deleteComment">
		delete from review_comment
		where comment_no = #{commentNo}
	</delete>
	
	<!-- 후기 댓글 수정 -->
	<update id="updateComment" parameterType="hashMap">
		update review_comment
		set comment_content = #{editedComment}
		where comment_no = #{commentNo}
	</update>
	
	<!-- 가게 후기 삭제 -->
	<delete id="deleteReview">
		delete from review
		where review_no = #{reviewNo}
	</delete>
	
	<!-- 후기 이미지 select -->
	<select id="selectReviewImg" resultType="String">
		select review_img_route from review_img
		where review_no = #{reviewNo}
	</select>
	
	<!-- 후기 수정 -->
	<update id="updateReview" parameterType="hashMap">
		update review
		set rate = #{updateRating}, review_content = #{updateContent}
		where review_no = #{reviewNo}
	</update>
	
	<!-- 후기 이미지 추가 -->
	<insert id="insertReviewImg" parameterType="hashMap">
		insert into review_img (review_no, review_img_route)
		values (#{reviewNo}, #{reviewImgRoute})
	</insert>
	
	<!-- 후기 이미지 수정 -->
	<update id="updateReviewImg" parameterType="hashMap">
		update review_img
		set review_img_route = #{reviewImgRoute}
		where review_no = #{reviewNo}
	</update>
	
	<!-- 후기 이미지 삭제 -->
	<delete id="deleteReviewImg">
		delete from review_img
		where review_no = #{reviewNo}
	</delete>
</mapper>